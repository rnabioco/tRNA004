# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
key_value_pairs[length(key_value_pairs) + 1:8] <- NA  # Ensure each list has 8 elements
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
return(final_data)
}
here("Modomics/modomics_ecoli_trna_sequences.fasta") -> ecoli
here("Modomics/modomics_scerevisiae_trna_sequences.fasta") -> yeast
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
parse_fasta(ecoli) -> ecoli
View(ecoli)
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
return(final_data)
}
parse_fasta(ecoli) -> ecoli
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(cowplot)
library(stringr)
library(here)
here::i_am("rmd/modomics.Rmd")
here("Modomics/modomics_ecoli_trna_sequences.fasta") -> ecoli
here("Modomics/modomics_scerevisiae_trna_sequences.fasta") -> yeast
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
return(final_data)
}
parse_fasta(yeast) -> yeast
parse_fasta(ecoli) -> ecoli
parse_fasta(human) -> human
View(yeast)
View(ecoli)
View(human)
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOTerm, -Type)
return(final_data)
}
here("Modomics/modomics_ecoli_trna_sequences.fasta") -> ecoli
here("Modomics/modomics_scerevisiae_trna_sequences.fasta") -> yeast
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
parse_fasta(ecoli) -> ecoli
parse_fasta(ecoli) -> ecoli
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
parse_fasta(here("Modomics/modomics_ecoli_trna_sequences.fasta")) -> ecoli
parse_fasta(here("Modomics/modomics_scerevisiae_trna_sequences.fasta")) -> yeast
parse_fasta(here("Modomics/modomics_hsapiens_trna_sequences.fasta")) -> human
View(human)
View(ecoli)
View(yeast)
parse_fasta(here("Modomics/modomics_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/modomics_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/modomics_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/unmodified_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/unmodified_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/modified_ecoli_trna_sequences.fasta")) -> ecoli_modified
parse_fasta(here("Modomics/modified_scerevisiae_trna_sequences.fasta")) -> yeast_modified
parse_fasta(here("Modomics/modified_hsapiens_trna_sequences.fasta")) -> human_modified
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(cowplot)
library(stringr)
library(here)
here::i_am("rmd/modomics.Rmd")
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/unmodified_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/unmodified_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/modified_ecoli_trna_sequences.fasta")) -> ecoli_modified
parse_fasta(here("Modomics/modified_scerevisiae_trna_sequences.fasta")) -> yeast_modified
parse_fasta(here("Modomics/modified_hsapiens_trna_sequences.fasta")) -> human_modified
View(ecoli_modified)
View(human_modified)
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(cowplot)
library(stringr)
library(here)
here::i_am("rmd/modomics.Rmd")
# to parse a single FASTA file with headers from Modomics.org
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/unmodified_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/unmodified_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/modified_ecoli_trna_sequences.fasta")) -> ecoli_modified
parse_fasta(here("Modomics/modified_scerevisiae_trna_sequences.fasta")) -> yeast_modified
parse_fasta(here("Modomics/modified_hsapiens_trna_sequences.fasta")) -> human_modified
View(yeast_modified)
yeast_modified
type(yeast_modified
type(yeast_modified)
class(yeast_modified)
library(stringr)
generate_bed_data <- function(df) {
bed_data_list <- lapply(1:nrow(df), function(i) {
seq_name <- df$Name[i]
sequence <- df$Sequence[i]
special_chars <- str_locate_all(sequence, "[^A-Za-z]")[[1]]  # Adjust regex for your needs
if (is.null(special_chars) || nrow(special_chars) == 0) {
return(NULL)  # No special characters found
}
special_chars_df <- as.data.frame(special_chars)
special_chars_df$Name <- seq_name
special_chars_df$Character <- str_sub(sequence, special_chars_df$start, special_chars_df$end)
colnames(special_chars_df) <- c("Start", "End", "Name", "Character")
return(special_chars_df)
})
do.call("rbind", bed_data_list)
}
# Assuming yeast_modified is your data frame
bed_data <- generate_bed_data(yeast_modified)
# Write to a BED file
write.table(bed_data, "special_characters.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
View(bed_data)
# to parse a single FASTA file with headers from Modomics.org
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "AA", "Anticodon", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/unmodified_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/unmodified_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/modified_ecoli_trna_sequences.fasta")) -> ecoli_modified
parse_fasta(here("Modomics/modified_scerevisiae_trna_sequences.fasta")) -> yeast_modified
parse_fasta(here("Modomics/modified_hsapiens_trna_sequences.fasta")) -> human_modified
library(stringr)
generate_bed_data <- function(df) {
bed_data_list <- lapply(1:nrow(df), function(i) {
seq_name <- df$Name[i]
sequence <- df$Sequence[i]
special_chars <- str_locate_all(sequence, "[^A-Za-z]")[[1]]  # Adjust regex for your needs
if (is.null(special_chars) || nrow(special_chars) == 0) {
return(NULL)  # No special characters found
}
special_chars_df <- as.data.frame(special_chars)
special_chars_df$Name <- seq_name
special_chars_df$Character <- str_sub(sequence, special_chars_df$start, special_chars_df$end)
colnames(special_chars_df) <- c("Start", "End", "Name", "Character")
return(special_chars_df)
})
do.call("rbind", bed_data_list)
}
# Assuming yeast_modified is your data frame
bed_data <- generate_bed_data(yeast_modified)
# Write to a BED file
write.table(bed_data, "special_characters.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
View(ecoli_modified)
ecoli_modified
generate_bed_data <- function(df) {
bed_data_list <- lapply(1:nrow(df), function(i) {
seq_name <- df$Name[i]
aa <- df$AA[i]
anticodon <- df$Anticodon[i]
cellular_location <- df$Cellular_Localization[i]
species <- df$Species[i]
sequence <- df$Sequence[i]
special_chars <- str_locate_all(sequence, "[^A-Za-z]")[[1]]  # Adjust regex for your needs
if (is.null(special_chars) || nrow(special_chars) == 0) {
return(NULL)  # No special characters found
}
special_chars_df <- as.data.frame(special_chars)
special_chars_df$Name <- seq_name
special_chars_df$AA <- aa
special_chars_df$Anticodon <- anticodon
special_chars_df$Cellular_Localization <- cellular_location
special_chars_df$Species <- species
special_chars_df$ASCII_mod <- str_sub(sequence, special_chars_df$start, special_chars_df$end)
colnames(special_chars_df) <- c("Start", "End", "Name", "AA", "Anticodon", "Cellular_Localization", "Species", "ASCII_mod")
return(special_chars_df)
})
do.call("rbind", bed_data_list)
}
bed_data <- generate_bed_data(yeast_modified)
# test write to a BED file
write.table(bed_data, "yeast_tRNA_mods.bed", sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
View(bed_data)
# test write to bed file
output_file_path <- here("ref", "yeast_tRNA_modifications.bed")
write.table(bed_data, output_file_path, sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
View(yeast_modified)
View(human_modified)
View(bed_data)
View(yeast_modified)
knitr::opts_chunk$set(message=FALSE)
library(tidyverse)
library(colorblindr)
library(cowplot)
library(forcats)
library(here)
here::i_am("Rmd/tRNAseq.Rmd")
read_tRNA <- function(x, sample_id) {
df <- readr::read_tsv(x, col_names = c("chrom", "start", "pos", "score"))
df <- df %>%
dplyr::mutate(Sample = sample_id)
return(df)
}
read_tRNA(here("data/20230818.induced.Hs.tRNome.bg"), "induced") -> induced
read_tRNA(here("data/20230818.uninduced.Hs.tRNome.bg"), "uninduced") -> uninduced
bind_rows(induced, uninduced) %>%
mutate(pos = as.numeric(pos)) %>%
mutate(score = as.numeric(score)) %>%
separate(chrom, c("t", "AA", "anticodon", "family", "number")) -> tRNAcov
tRNAcov %>%
group_by(t, anticodon, family, number, Sample) %>%
slice_max(score, with_ties = F) %>%
unite(tRNA, AA, anticodon, family, number, sep = "-") %>%
select(-pos) -> rollup
rollup %>%
select(-t) %>%
separate(tRNA, c("AA", "anticodon"), extra = "drop") %>%
group_by(AA, anticodon, Sample) %>%
summarize(score = sum(score)) %>%
unite(tRNA, AA, anticodon, sep = "-") %>%
ungroup() %>%
group_by(Sample) %>%
mutate(total_score = sum(score)) %>%
mutate(CPM = score/total_score*1000000) -> isodecoder_scores
isodecoder_scores %>%
filter(str_starts(tRNA, "Gly") | str_starts(tRNA, "Pro")) %>%
ggplot(., aes(y = CPM, x = tRNA, fill = fct_rev(Sample))) +
geom_bar(stat = "identity", width=.5, position = "dodge") +
scale_fill_OkabeIto(order = c(2,1)) +
theme_minimal() +
theme(legend.position = 'right',
legend.title = element_blank(),
legend.direction ='vertical') +
theme(axis.text.x = element_text(angle = 90, vjust = .35)) +
theme(aspect.ratio=1/4) +
labs(title = "",
x = "",
y = "Counts / Million")
isodecoder_scores %>%
select(-score, -total_score) %>%
pivot_wider(names_from = Sample, values_from = CPM, values_fill = 0) %>%
mutate(foldc = ((induced/uninduced)-1)) -> fc
fc %>%
ggplot(., aes(y = foldc, x = tRNA)) +
geom_bar(stat = "identity", width=.5, position = "dodge") +
scale_fill_OkabeIto(order = c(3,7)) +
theme_minimal() +
theme(legend.position = 'right',
legend.title = element_blank(),
legend.direction ='vertical') +
theme(axis.text.x = element_text(angle = 90, vjust = .35)) +
theme(aspect.ratio=1/4) +
labs(title = "tRNA foldchange by isodecoder on TGFb induction",
x = "",
y = "Fold Change")
isodecoder_scores %>%
separate(tRNA, c("AA", "anticodon"), extra = "drop") %>%
group_by(AA, Sample) %>%
summarize(score = sum(CPM)) -> isoacceptor_scores
isoacceptor_scores %>%
ggplot(., aes(y = score, x = AA, fill = fct_rev(Sample))) +
geom_bar(stat = "identity", width=.5, position = "dodge") +
scale_fill_OkabeIto(order = c(2,1)) +
theme_minimal() +
theme(legend.position = 'right',
legend.title = element_blank(),
legend.direction ='vertical') +
theme(axis.text.x = element_text(angle = 90, vjust = .35)) +
theme(aspect.ratio=1/4) +
labs(title = "",
x = "",
y = "Counts/Million")
isoacceptor_scores %>%
select(-score) %>%
pivot_wider(names_from = Sample, values_from = CP10K, values_fill = 0) %>%
mutate(foldc = ((induced/uninduced)-1)) -> fcAAs
result <- isoacceptor_scores %>%
mutate(AA_category = if_else(AA %in% c("Pro", "Gly"), AA, "All_Other")) %>%
group_by(Sample, AA_category) %>%
summarize(combined_score = sum(score), .groups = "drop")
result %>%
pivot_wider(names_from = Sample, values_from = combined_score, values_fill = 0) %>%
mutate(foldc = ((induced/uninduced)-1)) -> fcAAs
fcAAs %>%
ggplot(., aes(y = foldc, x = AA_category)) +
geom_bar(stat = "identity", width=.5, position = "dodge") +
scale_fill_OkabeIto(order = c(3,7)) +
theme_minimal() +
theme(legend.position = 'right',
legend.title = element_blank(),
legend.direction ='vertical') +
theme(axis.text.x = element_text(angle = 90, vjust = .35)) +
labs(title = "tRNA foldchange by isoacceptor on TGFb induction",
x = "",
y = "Fold Change")
fcAAs %>%
ggplot(., aes(y = foldc, x = AA_category)) +
geom_bar(stat = "identity", width=.5, position = "dodge") +
scale_fill_OkabeIto(order = c(3,7)) +
theme_minimal() +
theme(legend.position = 'right',
legend.title = element_blank(),
legend.direction ='vertical') +
theme(axis.text.x = element_text(angle = 90, vjust = .35)) +
labs(title = "tRNA foldchange by isoacceptor induction",
x = "",
y = "Fold Change")
fcAAs %>%
ggplot(., aes(y = foldc, x = AA_category)) +
geom_bar(stat = "identity", width=.5, position = "dodge") +
scale_fill_OkabeIto(order = c(3,7)) +
theme_minimal() +
theme(legend.position = 'right',
legend.title = element_blank(),
legend.direction ='vertical') +
theme(axis.text.x = element_text(angle = 90, vjust = .35)) +
labs(title = "tRNA foldchange by isoacceptor",
x = "",
y = "Fold Change")
