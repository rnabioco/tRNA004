ungroup()
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Density of RNA002 and RNA004 by Mods",
x = "Value",
y = "Density") +
theme_minimal()
# Suppress warnings during rendering
suppressWarnings(print(p))
long_mod_df <- test %>%
filter(!is.na(mods)) %>%
gather(key = "RNA_type", value = "value", RNA002, RNA004)
# Pre-filter data to remove groups with too few data points
filtered_df <- long_mod_df %>%
group_by(mods, RNA_type) %>%
filter(sum(!is.na(value)) > 1) %>%
ungroup()
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
theme_minimal()
# Suppress warnings during rendering
suppressWarnings(print(p))
# Rename RNA004 to 'new' and RNA002 to 'old' in the RNA_type column
filtered_df <- filtered_df %>%
mutate(RNA_type = case_when(
RNA_type == "RNA004" ~ "new",
RNA_type == "RNA002" ~ "old",
TRUE ~ RNA_type  # Keeps all other values as is
))
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
theme_minimal()
# Suppress warnings during rendering
suppressWarnings(print(p))
ggsave("bcerr_tRNA_mods.png")
ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
theme_minimal() +
coord_fixed(ratio = 1/2)
plots <- lapply(unique(filtered_df$mods), function(mod) {
df_subset <- filtered_df %>% filter(mods == mod)
ggplot(df_subset, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
coord_fixed(ratio = 1/2) +
labs(title = paste("Density of RNA002 and RNA004 for", mod),
x = "Value",
y = "Density")
})
combined_plot <- wrap_plots(plots, ncol = 1)
library(patchwork)
plots <- lapply(unique(filtered_df$mods), function(mod) {
df_subset <- filtered_df %>% filter(mods == mod)
ggplot(df_subset, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
coord_fixed(ratio = 1/2) +
labs(title = paste("Density of RNA002 and RNA004 for", mod),
x = "Value",
y = "Density")
})
combined_plot <- wrap_plots(plots, ncol = 1)
combined_plot
ggsave("bcerr_tRNA_mods.png", plot = last_plot(), width = 10, height = 5)
long_mod_df <- test %>%
filter(!is.na(mods)) %>%
gather(key = "RNA_type", value = "value", RNA002, RNA004)
# Pre-filter data to remove groups with too few data points
filtered_df <- long_mod_df %>%
group_by(mods, RNA_type) %>%
filter(sum(!is.na(value)) > 1) %>%
ungroup()
# Rename RNA004 to 'new' and RNA002 to 'old' in the RNA_type column
filtered_df <- filtered_df %>%
mutate(RNA_type = case_when(
RNA_type == "RNA004" ~ "new",
RNA_type == "RNA002" ~ "old",
TRUE ~ RNA_type  # Keeps all other values as is
))
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
theme_minimal() +
coord_fixed(ratio = 1/2)
# Suppress warnings during rendering
suppressWarnings(print(p))
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(cowplot)
library(reshape2)
library(here)
here::i_am("rmd/RNA004_tRNAmods.Rmd")
readr::read_tsv(here("test.err_diff.tsv")) -> test
# fix dumb col names
test %>%
dplyr::rename(mods = name, RNA002 = wt, bcdiff = RNA004, tRNA = chrom) %>%
mutate(RNA004 = (bcdiff + RNA002)) -> test # new chem column = bcdiff + oldchem
long_mod_df <- test %>%
filter(!is.na(mods)) %>%
gather(key = "RNA_type", value = "value", RNA002, RNA004)
# Pre-filter data to remove groups with too few data points
filtered_df <- long_mod_df %>%
group_by(mods, RNA_type) %>%
filter(sum(!is.na(value)) > 1) %>%
ungroup()
# Rename RNA004 to 'new' and RNA002 to 'old' in the RNA_type column
filtered_df <- filtered_df %>%
mutate(RNA_type = case_when(
RNA_type == "RNA004" ~ "new",
RNA_type == "RNA002" ~ "old",
TRUE ~ RNA_type  # Keeps all other values as is
))
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
theme_minimal() +
coord_fixed(ratio = 1/2)
# Suppress warnings during rendering
suppressWarnings(print(p))
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
theme_minimal()
# Suppress warnings during rendering
suppressWarnings(print(p))
ggsave("bcerr_tRNA_mods.png", plot = last_plot(), width = 10, height = 5)
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
scale_fill_manual(values = c("old" = "#000000", "new" = "#CC79A7"))
theme_minimal()
# Suppress warnings during rendering
suppressWarnings(print(p))
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
scale_fill_manual(values = c("old" = "#000000", "new" = "#CC79A7")) +
theme_cowplot()
# Suppress warnings during rendering
suppressWarnings(print(p))
# Create the ggplot object
p <- ggplot(filtered_df, aes(x = value, fill = RNA_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ mods, scales = "free_y") +  # Free the y-axis scales
labs(title = "Basecalling error differences at known tRNA modification sites",
x = "Summed basecalling error",
y = "Density",
fill = "Chemistry") +
scale_fill_manual(values = c("old" = "#000000", "new" = "#56B4E9")) +
theme_cowplot()
# Suppress warnings during rendering
suppressWarnings(print(p))
readr::read_file(here("Modomics/modified_all_all_all_rna_sequences-2/fasta"))
readr::read_file(here("Modomics/modified_all_all_all_rna_sequences-2.fasta"))
readr::read_file(here("Modomics/modified_all_all_all_rna_sequences-2.fasta")) -> modomics
readr::read_tsv(here("Modomics/modified_all_all_all_rna_sequences-2.fasta")) -> modomics
readr::read_file(here("Modomics/modified_all_all_all_rna_sequences-2.fasta")) -> modomics
modomics
library(stringr)
# Replace "path_to_your_fasta_file.fasta" with the path to your FASTA file
fasta_lines <- read_lines(here("Modomics/modomics_ecoli_trna_sequences.fasta"))
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
parts <- str_split(header, "\\|", simplify = TRUE)
data.frame(matrix(parts, ncol = length(parts[1, ]), byrow = TRUE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the column names and data
final_data <- final_data %>%
mutate(across(where(is.character), str_remove_all, pattern = "^id:|Name:|SOterm:|Type:|Subtype:|Feature:|Cellular_Localization:|Species:")) %>%
rename(ID = V1, Name = V2, SOterm = V3, Type = V4, Subtype = V5, Feature = V6, Cellular_Localization = V7, Species = V8)
# Replace "path_to_your_fasta_file.fasta" with the path to your FASTA file
fasta_lines <- read_lines(here("Modomics/modomics_ecoli_trna_sequences.fasta"))
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
parts <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)
parts <- setNames(as.list(parts[[1]]), NULL)
return(do.call(rbind, lapply(parts, function(x) unlist(str_split(x, ":", simplify = TRUE)[2]))))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Fix column names if necessary
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Replace "path_to_your_fasta_file.fasta" with the path to your FASTA file
fasta_lines <- read_lines(here("Modomics/modomics_ecoli_trna_sequences.fasta"))
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
key_value_pairs[length(key_value_pairs) + 1:8] <- NA  # Ensure each list has 8 elements
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
# View the final table
print(final_data)
# Replace "path_to_your_fasta_file.fasta" with the path to your FASTA file
fasta_lines <- read_lines(here("Modomics/modomics_ecoli_trna_sequences.fasta"))
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
#  key_value_pairs[length(key_value_pairs) + 1:8] <- NA  # Ensure each list has 8 elements
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
# View the final table
print(final_data)
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
key_value_pairs[length(key_value_pairs) + 1:8] <- NA  # Ensure each list has 8 elements
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
return(final_data)
}
here("Modomics/modomics_ecoli_trna_sequences.fasta") -> ecoli
here("Modomics/modomics_scerevisiae_trna_sequences.fasta") -> yeast
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
parse_fasta(ecoli) -> ecoli
View(ecoli)
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
return(final_data)
}
parse_fasta(ecoli) -> ecoli
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(cowplot)
library(stringr)
library(here)
here::i_am("rmd/modomics.Rmd")
here("Modomics/modomics_ecoli_trna_sequences.fasta") -> ecoli
here("Modomics/modomics_scerevisiae_trna_sequences.fasta") -> yeast
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:")))
return(final_data)
}
parse_fasta(yeast) -> yeast
parse_fasta(ecoli) -> ecoli
parse_fasta(human) -> human
View(yeast)
View(ecoli)
View(human)
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOTerm, -Type)
return(final_data)
}
here("Modomics/modomics_ecoli_trna_sequences.fasta") -> ecoli
here("Modomics/modomics_scerevisiae_trna_sequences.fasta") -> yeast
here("Modomics/modomics_hsapiens_trna_sequences.fasta") -> human
parse_fasta(ecoli) -> ecoli
parse_fasta(ecoli) -> ecoli
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
parse_fasta(here("Modomics/modomics_ecoli_trna_sequences.fasta")) -> ecoli
parse_fasta(here("Modomics/modomics_scerevisiae_trna_sequences.fasta")) -> yeast
parse_fasta(here("Modomics/modomics_hsapiens_trna_sequences.fasta")) -> human
View(human)
View(ecoli)
View(yeast)
parse_fasta(here("Modomics/modomics_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/modomics_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/modomics_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/unmodified_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/unmodified_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/modified_ecoli_trna_sequences.fasta")) -> ecoli_modified
parse_fasta(here("Modomics/modified_scerevisiae_trna_sequences.fasta")) -> yeast_modified
parse_fasta(here("Modomics/modified_hsapiens_trna_sequences.fasta")) -> human_modified
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(cowplot)
library(stringr)
library(here)
here::i_am("rmd/modomics.Rmd")
# Function to parse a single FASTA file
parse_fasta <- function(file_path) {
fasta_lines <- read_lines(file_path)
# Split lines into headers and sequences
headers <- fasta_lines[str_detect(fasta_lines, "^>")]
sequences <- fasta_lines[!str_detect(fasta_lines, "^>")]
# Function to parse headers
parse_header <- function(header) {
key_value_pairs <- str_split(str_remove_all(header, "^>"), "\\|", simplify = FALSE)[[1]]
key_value_pairs <- lapply(key_value_pairs, function(x) str_split(x, ":", simplify = TRUE)[1, 2])
return(as.data.frame(t(key_value_pairs), stringsAsFactors = FALSE))
}
# Parse all headers
parsed_headers <- do.call(rbind, lapply(headers, parse_header))
# Assign column names
colnames(parsed_headers) <- c("ID", "Name", "SOterm", "Type", "Subtype", "Feature", "Cellular_Localization", "Species")
# Combine headers and sequences
final_data <- data.frame(parsed_headers, Sequence = sequences)
# Tidy up the data
final_data <- final_data %>%
mutate(across(everything(), ~str_trim(.))) %>%
mutate(across(where(is.character), ~str_remove_all(., pattern = "^[^:]+:"))) %>%
select(-ID, -SOterm, -Type)
return(final_data)
}
parse_fasta(here("Modomics/unmodified_ecoli_trna_sequences.fasta")) -> ecoli_unmodified
parse_fasta(here("Modomics/unmodified_scerevisiae_trna_sequences.fasta")) -> yeast_unmodified
parse_fasta(here("Modomics/unmodified_hsapiens_trna_sequences.fasta")) -> human_unmodified
parse_fasta(here("Modomics/modified_ecoli_trna_sequences.fasta")) -> ecoli_modified
parse_fasta(here("Modomics/modified_scerevisiae_trna_sequences.fasta")) -> yeast_modified
parse_fasta(here("Modomics/modified_hsapiens_trna_sequences.fasta")) -> human_modified
View(ecoli_modified)
View(human_modified)
